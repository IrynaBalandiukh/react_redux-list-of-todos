{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers/helpers.ts","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","value","initialState","query","status","All","filterReducer","initialTodos","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoInfo","id","title","completed","dispatch","isTodoSelected","className","cn","onClick","currentTodoActions","TodoList","map","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","userId","useState","user","setUser","useEffect","getUser","userFromServer","catch","error","Error","message","href","email","name","App","isLoaded","setIsLoaded","visibleTodos","useMemo","isStatusMatch","normalizedQuery","trim","toLowerCase","isTodoIncluded","includes","Active","Completed","getVisibleTodos","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be62d752.chunk.js","sourcesContent":["// export type Status = 'all' | 'active' | 'completed';\n\nexport enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype ClearQueryAction = { type: 'filter/CLEAR_QUERY' };\ntype SetStatusAction = { type: 'filter/SET_STATUS', payload: Status };\n\nexport const actions = {\n  setQuery: (value: string): SetQueryAction => (\n    { type: 'filter/SET_QUERY', payload: value }\n  ),\n  clearQuery: (): ClearQueryAction => (\n    { type: 'filter/CLEAR_QUERY' }\n  ),\n  setStatus: (value: Status): SetStatusAction => (\n    { type: 'filter/SET_STATUS', payload: value }\n  ),\n};\n\ntype State = { query: string, status: Status };\ntype Action = SetQueryAction | ClearQueryAction | SetStatusAction ;\n\nconst initialState: State = { query: '', status: Status.All };\n\nconst filterReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ('filter/SET_QUERY'):\n      return { ...state, query: action.payload };\n\n    case ('filter/CLEAR_QUERY'):\n      return { ...state, query: '' };\n\n    case ('filter/SET_STATUS'):\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo[] };\n\nexport const actions = {\n  setTodos: (value: Todo[]): SetTodosAction => (\n    { type: 'todos/SET', payload: value }\n  ),\n};\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst initialTodos: State = [];\n\nconst todosReducer = (state = initialTodos, action: Action): Todo[] => {\n  switch (action.type) {\n    case ('todos/SET'):\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const { id, title, completed } = todo;\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const isTodoSelected = id === currentTodo?.id;\n\n  const handleSelectClick = () => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': isTodoSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={cn({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleSelectClick}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': !isTodoSelected,\n              'fa-eye-slash': isTodoSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <TodoInfo\n              key={todo.id}\n              todo={todo}\n            />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(filterActions.clearQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={handleQueryClear}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  const handleCloseClick = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    getUser(userId)\n      .then(userFromServer => {\n        setUser(userFromServer);\n      })\n      .catch(error => {\n        throw new Error(error.message);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"delete\"\n                aria-label=\"close\"\n                data-cy=\"modal-close\"\n                onClick={handleCloseClick}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { getVisibleTodos } from './helpers/helpers';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const visibleTodos = useMemo(() => {\n    return getVisibleTodos(todos, query, status as Status);\n  }, [todos, query, status]);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        dispatch(todosActions.setTodos(todosFromServer));\n        setIsLoaded(true);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded\n                ? <TodoList todos={visibleTodos} />\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal todo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  query: string,\n  status: Status,\n) => {\n  return todos.filter((todo) => {\n    const normalizedQuery = query.trim().toLowerCase();\n    const normalizedTodo = todo.title.trim().toLowerCase();\n\n    const isTodoIncluded = normalizedTodo.includes(normalizedQuery);\n\n    let isStatusMatch: boolean;\n\n    switch (status) {\n      case Status.Active:\n        isStatusMatch = !todo.completed;\n        break;\n\n      case Status.Completed:\n        isStatusMatch = todo.completed;\n        break;\n\n      default:\n        isStatusMatch = true;\n    }\n\n    return isTodoIncluded && isStatusMatch;\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}